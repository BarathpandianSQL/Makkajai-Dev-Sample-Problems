import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class Talk {
    String title;
    int duration;

    Talk(String title, int duration) {
        this.title = title;
        this.duration = duration;
    }
}

class Session {
    List<Talk> talks = new ArrayList<>();
    int availableTime;

    Session(int availableTime) {
        this.availableTime = availableTime;
    }
}

class Track {
    Session morningSession = new Session(180);
    Session afternoonSession = new Session(240);

    void addTalkToSession(Talk talk, Session session) {
        session.talks.add(talk);
        session.availableTime -= talk.duration;
    }
}

public class ConferenceScheduler {
    public static void main(String[] args) {
        List<Talk> talkProposals = new ArrayList<>();
        talkProposals.add(new Talk("Writing Fast Tests Against Enterprise Rails", 60));
        talkProposals.add(new Talk("Overdoing it in Python", 45));
        talkProposals.add(new Talk("Lua for the Masses", 30));
        talkProposals.add(new Talk("Ruby Errors from Mismatched Gem Versions", 45));
        talkProposals.add(new Talk("Common Ruby Errors", 45));
        talkProposals.add(new Talk("Rails for Python Developers", 5)); // lightning
        talkProposals.add(new Talk("Communicating Over Distance", 60));
        talkProposals.add(new Talk("Accounting-Driven Development", 45));
        talkProposals.add(new Talk("Woah", 30));
        talkProposals.add(new Talk("Sit Down and Write", 30));
        talkProposals.add(new Talk("Pair Programming vs Noise", 45));
        talkProposals.add(new Talk("Rails Magic", 60));
        talkProposals.add(new Talk("Ruby on Rails: Why We Should Move On", 60));
        talkProposals.add(new Talk("Clojure Ate Scala (on my project)", 45));
        talkProposals.add(new Talk("Programming in the Boondocks of Seattle", 30));
        talkProposals.add(new Talk("Ruby vs. Clojure for Back-End Development", 30));
        talkProposals.add(new Talk("Ruby on Rails Legacy App Maintenance", 60));
        talkProposals.add(new Talk("A World Without HackerNews", 30));
        talkProposals.add(new Talk("User Interface CSS in Rails Apps", 30));

        Collections.sort(talkProposals, (a, b) -> Integer.compare(b.duration, a.duration));

        List<Track> tracks = scheduleTalksIntoTracks(talkProposals);

        int trackNumber = 1;
        for (Track track : tracks) {
            System.out.println("Track " + trackNumber + ":");
            printSessionSchedule("Morning Session", track.morningSession);
            printSessionSchedule("Afternoon Session", track.afternoonSession);
            trackNumber++;
        }
    }

    private static List<Track> scheduleTalksIntoTracks(List<Talk> talkProposals) {
        List<Track> tracks = new ArrayList<>();
        Track currentTrack = new Track();

        for (Talk talk : talkProposals) {
            boolean added = false;

            if (talk.duration <= currentTrack.morningSession.availableTime) {
                currentTrack.addTalkToSession(talk, currentTrack.morningSession);
                added = true;
            } else if (talk.duration <= currentTrack.afternoonSession.availableTime) {
                if (currentTrack.afternoonSession.availableTime >= 180) {
                    currentTrack.addTalkToSession(new Talk("Networking Event", 0), currentTrack.afternoonSession);
                }
                currentTrack.addTalkToSession(talk, currentTrack.afternoonSession);
                added = true;
            }

            if (!added) {
                tracks.add(currentTrack);
                currentTrack = new Track();
                currentTrack.addTalkToSession(talk, currentTrack.morningSession);
            }
        }

        tracks.add(currentTrack); // Add the last track
        return tracks;
    }

    private static void printSessionSchedule(String sessionName, Session session) {
        System.out.println(sessionName + ":");

        int time = sessionName.equals("Morning Session") ? 540 : 780; // 9:00 AM or 1:00 PM

        for (Talk talk : session.talks) {
            int hours = time / 60;
            int minutes = time % 60;

            String formattedTime = String.format("%02d:%02d", hours, minutes);
            System.out.println(formattedTime + " " + talk.title + " " + (talk.duration == 5 ? "lightning" : talk.duration + "min"));

            time += talk.duration;
        }

        if (sessionName.equals("Afternoon Session") && time >= 1020 && time <= 1080) {
            System.out.println("05:00PM Networking Event");
        }

        System.out.println();
    }
}
