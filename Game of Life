import java.util.HashSet;
import java.util.Set;

class Cell {
    int x;
    int y;

    public Cell(int x, int y) {
        this.x = x;
        this.y = y;
    }

    @Override
    public int hashCode() {
        return x * 31 + y;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null || getClass() != obj.getClass())
            return false;
        Cell other = (Cell) obj;
        return x == other.x && y == other.y;
    }
}

public class GameOfLife {
    public static Set<Cell> nextGeneration(Set<Cell> cells) {
        Set<Cell> nextGen = new HashSet<>();
        Set<Cell> neighbors = new HashSet<>();
        
        for (Cell cell : cells) {
            int liveNeighbors = 0;
            
            for (int dx = -1; dx <= 1; dx++) {
                for (int dy = -1; dy <= 1; dy++) {
                    if (dx == 0 && dy == 0)
                        continue;
                    
                    Cell neighbor = new Cell(cell.x + dx, cell.y + dy);
                    if (cells.contains(neighbor)) {
                        liveNeighbors++;
                    } else {
                        neighbors.add(neighbor);
                    }
                }
            }
            
            if (liveNeighbors == 2 || liveNeighbors == 3) {
                nextGen.add(cell);
            }
        }
        
        for (Cell neighbor : neighbors) {
            int liveNeighbors = 0;
            
            for (int dx = -1; dx <= 1; dx++) {
                for (int dy = -1; dy <= 1; dy++) {
                    if (dx == 0 && dy == 0)
                        continue;
                    
                    Cell checkCell = new Cell(neighbor.x + dx, neighbor.y + dy);
                    if (cells.contains(checkCell)) {
                        liveNeighbors++;
                    }
                }
            }
            
            if (liveNeighbors == 3) {
                nextGen.add(neighbor);
            }
        }
        
        return nextGen;
    }

    public static void printCells(Set<Cell> cells) {
        for (Cell cell : cells) {
            System.out.println(cell.x + ", " + cell.y);
        }
    }

    public static void main(String[] args) {
        Set<Cell> cellsA = new HashSet<>();
        cellsA.add(new Cell(1, 1));
        cellsA.add(new Cell(1, 2));
        cellsA.add(new Cell(2, 1));
        cellsA.add(new Cell(2, 2));
        
        Set<Cell> nextGenA = nextGeneration(cellsA);
        printCells(nextGenA);
    }
}
